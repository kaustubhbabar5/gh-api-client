// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	github "github.com/kaustubhbabar5/gh-api-client/pkg/github"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// CacheUserInfo provides a mock function with given fields: users, duration
func (_m *Cache) CacheUserInfo(users []github.User, duration time.Duration) []error {
	ret := _m.Called(users, duration)

	var r0 []error
	if rf, ok := ret.Get(0).(func([]github.User, time.Duration) []error); ok {
		r0 = rf(users, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: usernames
func (_m *Cache) GetUserInfo(usernames []string) ([]github.User, []string, []error) {
	ret := _m.Called(usernames)

	var r0 []github.User
	if rf, ok := ret.Get(0).(func([]string) []github.User); ok {
		r0 = rf(usernames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]github.User)
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = rf(usernames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 []error
	if rf, ok := ret.Get(2).(func([]string) []error); ok {
		r2 = rf(usernames)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]error)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
