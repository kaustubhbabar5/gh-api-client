// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	github "github.com/kaustubhbabar5/gh-api-client/pkg/github"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: username
func (_m *Client) GetUser(username string) (github.User, error) {
	ret := _m.Called(username)

	var r0 github.User
	if rf, ok := ret.Get(0).(func(string) github.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(github.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: usernames
func (_m *Client) GetUsers(usernames []string) ([]github.User, []string, []error) {
	ret := _m.Called(usernames)

	var r0 []github.User
	if rf, ok := ret.Get(0).(func([]string) []github.User); ok {
		r0 = rf(usernames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]github.User)
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = rf(usernames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 []error
	if rf, ok := ret.Get(2).(func([]string) []error); ok {
		r2 = rf(usernames)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]error)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
